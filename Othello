import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Container;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;

public class Othello implements ActionListener, MouseListener { //Added mouse listener for move previews
	final int P1 = 0;
	final int P2 = 1;
	final int BLANK = 2;
	String p1_name = "Player 1 name";
	String p2_name = "Player 2 name";
	String p1_score = " ";
	String p2_score = " ";
	String p1_pieces = " ";
	String p2_pieces = " ";
	String turn = " ";
	int p1_score_int; //All to be made into strings later
	int p2_score_int;
	int p1_pieces_int;
	int p2_pieces_int;
	int turn_int;
	boolean p2_human = false;
	JFrame frame = new JFrame();
	JTextField P1name = new JTextField(p1_name);
	JLabel P1pieces = new JLabel(p1_pieces);
	JLabel P1score = new JLabel(p1_score);
	Container center = new Container();
	Container south = new Container();
	Container west = new Container();
	JTextField P2name = new JTextField(p2_name);
	JLabel P2pieces = new JLabel(p2_pieces);
	JLabel P2score = new JLabel(p2_score);
	JButton restart = new JButton("Restart");
	JButton P2drop_in = new JButton();
	/*PieceIndicator P1indicator = new PieceIndicator();
	 * Out entirely optional stretch goals.
	 * Likely not needed but if we have extra time who knows.
	 * They will remain commented for now.
	PieceIndicator P2indicator = new PieceIndicator();*/
	JButton[][] board = new JButton[8][8];
	Piece[][] tiles = new Piece[8][8];
	JLabel Turn = new JLabel(turn);
	
	public Othello(){
		frame.setSize(1280, 720);
		frame.setLayout(new BorderLayout());
		center.setLayout(new GridLayout(8, 8));
		for (int x = 0; x < board.length; x++)
		{
			for (int y = 0; y < board[0].length; y++)
			{
				board[x][y] = new JButton();
				center.add(board[x][y]);
				board[x][y].addActionListener(this);
				board[x][y].addMouseListener(this); //All buttons are given mouse listeners so they know when
			}						//they are being hovered over
		}
		frame.add(center, BorderLayout.CENTER);
		west.setLayout(new GridLayout(5,1));
		west.add(P1name);
		west.add(P2name);
		west.add(P1score);
		west.add(P2score);
		west.add(restart);
		restart.addActionListener(this);
		frame.add(west, BorderLayout.WEST);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
	}
	
	public static void main(String[] args) {
		new Othello();

	}
	public void textSet()
	{
		p1_score = Integer.toString(p1_score_int);
		p2_score = Integer.toString(p2_score_int);
		p1_pieces = Integer.toString(p1_pieces_int);
		p2_pieces = Integer.toString(p2_pieces_int);
		turn = Integer.toString(turn_int);
	}
	public void reset()
	{
		p1_score_int = 2;
		p2_score_int = 2;
		turn_int = 0;
		//Clear the board of all pieces
	}
	public void check(int x, int y)
	{
		for(int a = x; a < tiles.length; a++)
		{
			if(tiles[x][a].getPlayer() == BLANK)
			{
				if(tiles[x][a-1].getPlayer() == turn_int)
				{
					for(int e = x; e < tiles.length; e++)
					{
						tiles[x][e].setPlayer(turn_int);
					}
				}
			}
		}
		for(int b = x; b > -1; b--)
		{
			if(tiles[x][b].getPlayer() == BLANK)
			{
				if(tiles[x][b+1].getPlayer() == turn_int)
				{
					for(int f = x; f < tiles.length; f++)
					{
						tiles[x][f].setPlayer(turn_int);
					}
				}
			}
		}
		for(int c = y; c < tiles[x].length; c++)
		{
			if(tiles[c][y].getPlayer() == BLANK)
			{
				if(tiles[c-1][y].getPlayer() == turn_int)
				{
					for(int g = x; g < tiles.length; g++)
					{
						tiles[g][y].setPlayer(turn_int);
					}
				}
			}
		}
		for(int d = y; d > -1; d--)
		{
			if(tiles[d][y].getPlayer() == BLANK)
			{
				if(tiles[d+1][y].getPlayer() == turn_int)
				{
					for(int h = x; h < tiles.length; h++)
					{
						tiles[h][y].setPlayer(turn_int);
					}
				}
			}
		}
	}
	public void actionPerformed(ActionEvent event) {
		if(event.getSource().equals(restart)){
			reset();
		}
		else{
			for (int x = 0; x < board.length; x++) {
				for (int y = 0; y < board[0].length; y++) {
					if(event.getSource().equals(board[x][y])){
						board[x][y].setText("TEST");
					}
				}
			}
		}
	}

	@Override
	public void mouseClicked(MouseEvent e) {//Autogenerated methods for mouselistener
		//This method does nothing, but Eclipse throws a fit
		//If I don't have it
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		//This method does nothing, but Eclipse throws a fit
		//If I don't have it
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {//These methods have no purpose, as clicking is handled by actionlistener
		//This method does nothing, but Eclipse throws a fit
		//If I don't have it
		
	}

	@Override
	public void mouseEntered(MouseEvent e) //If the player is hovering over the button
	{
		for(int x = 0; x < board.length; x++)
		{
			for(int y = 0; y < board[0].length; y++)
			{
				if(e.getSource().equals(board[x][y]))
				{
					//Piece.drawPreview()
				} //This currently unimplemented method will draw the transluscent piece and highlight what
			}	//The move will do.
		}
	}

	@Override
	public void mouseExited(MouseEvent e) {
		for(int x = 0; x < board.length; x++)
		{
			for(int y = 0; y < board[0].length; y++)
			{
				if(e.getSource().equals(board[x][y]))
				{
					//Piece.cancelPreview()
				}//This currently unimplemented method will cancel the preview drawn in the above mouse
			}	//listener method.
		}
	}
}
