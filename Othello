import java.awt.AlphaComposite;
import java.awt.BorderLayout;
import java.awt.Button;
import java.awt.Color;
import java.awt.Container;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.RenderingHints;

import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTextField;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.awt.image.ImageObserver;
import java.io.File;
import java.io.IOException;

public class Othello implements ActionListener, MouseListener {
	//Standard Varaibles (ints, booleans, and strings)
	final int P1 = 0;
	final int P2 = 1;
	final int BLANK = 2;
	final Image NULL = null;
	String p1_name = "Player 1";
	String p2_name = "Player 2";
	String p1_score = "2";
	String p2_score = "2";
	String p1_pieces = " ";
	String p2_pieces = " ";
	String turn = " ";
	int p1_score_int; //All to be made into strings later
	int p2_score_int;
	int p1_pieces_int;
	int p2_pieces_int;
	int turn_int;
	boolean Green = true;
	boolean p2_human = false;
	static public ImageIcon blankpiece;
	static public ImageIcon p1piece;
	static public ImageIcon p2piece;
	static public ImageIcon p1preview;
	static public ImageIcon p2preview;
	//Frame Related Variables
	JFrame frame = new JFrame();
	JTextField P1name = new JTextField(p1_name);
	JLabel P1pieces = new JLabel(p1_pieces);
	JLabel P1score = new JLabel(p1_score);
	Container center = new Container();
	//Why do we have a south container? Discuss next class
	Container south = new Container();
	Container west = new Container();
	JTextField P2name = new JTextField(p2_name);
	JLabel P2pieces = new JLabel(p2_pieces);
	JLabel P2score = new JLabel(p2_score);
	JButton restart = new JButton("Restart");
	JButton P2drop_in = new JButton("Play against Human");
	JButton pass = new JButton("Pass");
	/*PieceIndicator P1indicator = new PieceIndicator();
	 * Out entirely optional stretch goals.
	 * Likely not needed but if we have extra time who knows.
	 * They will remain commented for now.
	PieceIndicator P2indicator = new PieceIndicator();*/
	JButton[][] board = new JButton[8][8];
	Piece[][] tiles = new Piece[8][8];
	
	JLabel Turn = new JLabel(turn);
	
	public Othello(){
		//Image blankimg = NULL;
		try 
		{
		Image blankimg = ImageIO.read(new File("Blank.bmp"));
		System.out.println(blankimg);
		blankpiece = new ImageIcon(blankimg);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//blankpiece.setImage(blankimg);
		//Image p1img = NULL;
		try 
		{
		Image p1img = ImageIO.read(new File("White_Piece.png"));
		p1piece = new ImageIcon(p1img);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//p1piece.setImage(p1img);
		//Image p2img = NULL;
		try 
		{
		Image p2img = ImageIO.read(new File("Black_Piece.png"));
		p2piece = new ImageIcon(p2img);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//p2piece.setImage(p2img);
		//Image p1imgpre = NULL;
		try 
		{
		Image p1imgpre = ImageIO.read(new File("White_Piece_Opaque.png"));
		p1preview = new ImageIcon(p1imgpre);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//p1preview.setImage(p1imgpre);
		//Image p2imgpre = NULL;
		try 
		{
		Image p2imgpre = ImageIO.read(new File("Black_Piece_Opaque.png"));
		p2preview = new ImageIcon(p2imgpre);
		} catch (IOException e) {
			e.printStackTrace();
		}
		//p2preview.setImage(p2imgpre);
		frame.setSize(1280, 720);
		frame.setLayout(new BorderLayout());
		center.setLayout(new GridLayout(8, 8));
		for (int x = 0; x < board.length; x++)
		{
			for (int y = 0; y < board[0].length; y++)
			{
				board[x][y] = new JButton();
				center.add(board[x][y]);
				board[x][y].addActionListener(this);
				board[x][y].addMouseListener(this);
			}
		}
		frame.add(center, BorderLayout.CENTER);
		west.setLayout(new GridLayout(6,1));
		west.add(P1name);
		west.add(P2name);
		west.add(P1score);
		P1score.setText(P1name.getText() + ": " + p1_score);
		west.add(P2score);
		P2score.setText(P2name.getText() + ": " + p2_score);
		west.add(restart);
		restart.addActionListener(this);
		west.add(pass);
		pass.addActionListener(this);
		frame.add(west, BorderLayout.WEST);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		frame.setVisible(true);
		//Set board color through hard reset
		reset();
	}
	
	public static void main(String[] args) 
	{
		new Othello();

	}
	public void reset(){
		p1_score_int = 2;
		p2_score_int = 2;
		turn_int = 0;
		//Clear the board of all pieces
		for (int x = 0; x < board.length; x++)
		{
			if(Green == false)
			{
				Green = true;
			}
			else{
				Green = false;
			}
			for (int y = 0; y < board[0].length; y++) {
				if(Green == true){
					board[x][y].setBackground(Color.GREEN);
					Green = false;
				}
				else{
					board[x][y].setBackground(Color.WHITE);
					Green = true;
				}
				board[x][y].setText(" ");
				board[x][y].setEnabled(true);
			}
		}
	}
	public void textSet()
	{
		p1_score = Integer.toString(p1_score_int);
		p2_score = Integer.toString(p2_score_int);
		p1_pieces = Integer.toString(p1_pieces_int);
		p2_pieces = Integer.toString(p2_pieces_int);
		turn = Integer.toString(turn_int);
	}
	public void check1(int x, int y) //Default check method. Checks from point A to the left.
	{
		/*
		 * OOOOO	OOOOO	OOOOO
		 * OOOOO	OOOOO	OOOOO
		 * OOOOO	OOOOO	OOOOO
		 * OXOOX	OX->X	OXXXX
		 * OOOOO    OOOOO	OOOOO
		 */
		for(int a = x; a < tiles.length; a++)
		{
			if(tiles[a][y].getPlayer() != turn_int)
			{
				if(tiles[a-1][y].getPlayer() == turn_int)
				{
					for(int e = x; e < tiles.length; e++)
					{
						if(tiles[e][y].getPlayer() != turn_int)
						{
							if(tiles[e][y].getPlayer() != BLANK)
							{
								tiles[e][y].setPlayer(turn_int);
							}
							else
							{
								return;
							}
						}
					}
				}
			}
		}
	}
	public void check2(int x, int y) //2nd check method. Checks from point A to the right.
	{
		/*
		 * OOOOO	OOOOO	OOOOO
		 * OOOOO	OOOOO	OOOOO
		 * OOOOO	OOOOO	OOOOO
		 * OXOOX	OX<-X	OX<-X
		 * OOOOO    OOOOO	OOOOO
		 */
		for(int b = x; b > -1; b--)
		{
			if(tiles[b][y].getPlayer() != turn_int)
			{
				if(tiles[b+1][y].getPlayer() == turn_int)
				{
					for(int f = x; f > tiles.length; f--)
					{
						if(tiles[f][y].getPlayer() != turn_int)
						{
							if(tiles[f][y].getPlayer() != BLANK)
							{
								tiles[f][y].setPlayer(turn_int);
							}
							else
							{
								return;
							}
						}
					}
				}
			}
		}
	}
	public void check3(int x, int y) //3rd check method. Checks from point A down.
	{
		/*
		 * OxOOO	OXOOO	OXOOO
		 * OOOOO	O|OOO	OXOOO
		 * OOOOO	OVOOO	OXOOO
		 * OXOOO	OXOOO	OXOOO
		 * OOOOO    OOOOO	OOOOO
		 */
		for(int c = y; c < tiles[x].length; c++)
		{
			if(tiles[c][y].getPlayer() != turn_int)
			{
				if(tiles[c-1][y].getPlayer() == turn_int)
				{
					for(int g = y; g < tiles[x].length; g++)
					{
						if(tiles[g][y].getPlayer() != turn_int)
						{
							if(tiles[g][y].getPlayer() != BLANK)
							{
								tiles[g][y].setPlayer(turn_int);
							}
							else
							{
								return;
							}
						}
					}
				}
			}
		}
	}
	public void check4(int x, int y) //4th check method. Checks from point A up.
	{
		/*
		 * OxOOO	OXOOO	OXOOO
		 * OOOOO	O^OOO	OXOOO
		 * OOOOO	O|OOO	OXOOO
		 * OXOOO	OXOOO	OXOOO
		 * OOOOO    OOOOO	OOOOO
		 */
		for(int d = y; d > -1; d--)
		{
			if(tiles[d][y].getPlayer() != turn_int)
			{
				if(tiles[d+1][y].getPlayer() == turn_int)
				{
					for(int h = y; h > tiles[x].length; h--)
					{
						if(tiles[h][y].getPlayer() != turn_int)
						{
							if(tiles[h][y].getPlayer() != BLANK)
							{
								tiles[h][y].setPlayer(turn_int);
							}
							else
							{
								return;
							}
						}
					}
				}
			}
		}
	}
	public void check5(int x, int y) //5th check method. Checks diagonally from point A down and to the right.
	{
		/*
		 * XOOOO	XOOOO	XOOOO
		 * OOOOO	O\OOO	OXOOO
		 * OOOOO	OO\OO	OOXOO
		 * OOOOO	OOO\O	OOOXO
		 * OOOOX    OOOOX	OOOOX
		 */
		if(tiles.length-0 > tiles[x].length-y)
		{
			for(int i = 0; i < tiles.length-x; i++)
			{
				if(tiles[x+i][y+i].getPlayer() != turn_int)
				{
					if(tiles[x+i-1][y+i-1].getPlayer() == turn_int)
					{
						for(int j = 0; j < tiles.length-x; j++)
						{
							if(tiles[x+j][y+j].getPlayer() != turn_int)
							{
								if(tiles[x+j][y+j].getPlayer() != BLANK)
								{
									tiles[x+j][y+j].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			for(int k = 0; k < tiles[x].length-y; k++)
			{
				if(tiles[x+k][y+k].getPlayer() != turn_int)
				{
					if(tiles[x+k-1][y+k-1].getPlayer() == turn_int)
					{
						for(int l = 0; l < tiles[x].length; l++)
						{
							if(tiles[x+l][y+l].getPlayer() != turn_int)
							{
								if(tiles[x+l][y+l].getPlayer() != BLANK)
								{
									tiles[x+l][y+l].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	public void check6(int x, int y) //6th check method. Checks diagonally from point A up and to the left.
	{
		/*
		 * XOOOO	XOOOO	XOOOO
		 * OOOOO	O\OOO	OXOOO
		 * OOOOO	OO\OO	OOXOO
		 * OOOOO	OOO\O	OOOXO
		 * OOOOX    OOOOX	OOOOX
		 */
		if(-(x-tiles.length) > -(y-tiles[x].length))
		{
			for(int m = 0; m < -(x-tiles.length); m++)
			{
				if(tiles[x-m][y-m].getPlayer() != turn_int)
				{
					if(tiles[x-m+1][y-m+1].getPlayer() == turn_int)
					{
						for(int n = 0; n < -(x-tiles.length); n++)
						{
							if(tiles[x-n][y-n].getPlayer() != turn_int)
							{
								if(tiles[x-n][y-n].getPlayer() != BLANK)
								{
									tiles[x-n][y-n].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			for(int o = 0; o < -(y-tiles[x].length); o++)
			{
				if(tiles[x-o][y-o].getPlayer() != turn_int)
				{
					if(tiles[x-o+1][y-o+1].getPlayer() == turn_int)
					{
						for(int p = 0; p < -(y-tiles[x].length); p++)
						{
							if(tiles[x-p][y-p].getPlayer() != turn_int)
							{
								if(tiles[x-p][y-p].getPlayer() != BLANK)
								{
									tiles[x-p][y-p].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	public void check7(int x, int y) //7th check method. Checks diagonally from point A down and to the left.
	{
		/*
		 * OOOOX	OOOOX	OOOOX
		 * OOOOO	OOO/O	OOOXO
		 * OOOOO	OO/OO	OOXOO
		 * OOOOO	O/OOO	OXOOO
		 * XOOOO    XOOOO	XOOOO
		 */
		if(-(x-tiles.length) > (tiles[x].length-y))
		{
			for(int q = 0; q < -(x-tiles.length); q++)
			{
				if(tiles[x-q][y+q].getPlayer() != turn_int)
				{
					if(tiles[x-q+1][y+q-1].getPlayer() == turn_int)
					{
						for(int r = 0; r < -(x-tiles[x].length); r++)
						{
							if(tiles[x-r][y+r].getPlayer() != turn_int)
							{
								if(tiles[x-r][y+r].getPlayer() != BLANK)
								{
									tiles[x-r][y+r].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			for(int s = 0; s < tiles[x].length-y; s++)
			{
				if(tiles[x-s][y+s].getPlayer() != turn_int)
				{
					if(tiles[x-s+1][y+s-1].getPlayer() == turn_int)
					{
						for(int t = 0; t < tiles[x].length-y; t++)
						{
							if(tiles[x-t][y+t].getPlayer() != turn_int)
							{
								if(tiles[x-t][y+t].getPlayer() != BLANK)
								{
									tiles[x-t][y+t].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	public void check8(int x, int y) //8th check method. Checks diagonally from point A up and to the right
	{
		/*
		 * OOOOX	OOOOX	OOOOX
		 * OOOOO	OOO/O	OOOXO
		 * OOOOO	OO/OO	OOXOO
		 * OOOOO	O/OOO	OXOOO
		 * XOOOO    XOOOO	XOOOO
		 */
		if(tiles.length-x > -(y-tiles[x].length))
		{
			for(int u = 0; u < tiles.length-x; u++)
			{
				if(tiles[x+u][y-u].getPlayer() != turn_int)
				{
					if(tiles[x+u-1][y-u+1].getPlayer() == turn_int)
					{
						for(int v = x; v < tiles.length-x; v++)
						{
							if(tiles[x+u][y-u].getPlayer() != turn_int)
							{
								if(tiles[x+u][y-u].getPlayer() != BLANK)
								{
									tiles[x+u][y-u].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
		else
		{
			for(int w = 0; w < -(y-tiles[x].length); w++)
			{
				if(tiles[x+w][y-w].getPlayer() != turn_int)
				{
					if(tiles[x+w-1][y-w+1].getPlayer() == turn_int)
					{
						for(int z = 0; z < -(y-tiles[x].length); z--)
						{
							if(tiles[x+z][y-z].getPlayer() != turn_int)
							{
								if(tiles[x+z][y-z].getPlayer() != BLANK)
								{
									tiles[x+z][y-z].setPlayer(turn_int);
								}
								else
								{
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	public void actionPerformed(ActionEvent event) {
		if(event.getSource().equals(restart)){
			reset();
		}
		else if (event.getSource().equals(pass)){
			if(turn_int == P1){
				turn_int = P2;
			}
			else{
				turn_int = P1;
			}
		}
		else{
			for (int x = 0; x < board.length; x++) {
				for (int y = 0; y < board[0].length; y++) {
					if(event.getSource().equals(board[x][y])){
						//Check if a valid move
						//board[x][y].setText("TEST");
						board[x][y].setEnabled(false);
						if(turn_int == P1){
							turn_int = P2;
						//	Image p1piecers = p1piece.getScaledInstance(board[x][y].getSize().getWidth(), , SCALE_SMOOTH)
							board[x][y].setIcon(p1piecers);
						}
						else{
							turn_int = P1;
							board[x][y].setIcon(p2piece);
						}
					}
				}
			}
		}
		//Update the points and names
		P1score.setText(P1name.getText() + ": " + p1_score);
		P2score.setText(P2name.getText() + ": " + p2_score);
	}
	@Override
	public void mouseClicked(MouseEvent e) {
		//This method does nothing, but Eclipse throws a fit
		//If I don't have it
		
	}

	@Override
	public void mousePressed(MouseEvent e) {
		//This method does nothing, but Eclipse throws a fit
		//If I don't have it
		
	}

	@Override
	public void mouseReleased(MouseEvent e) {
		//This method does nothing, but Eclipse throws a fit
		//If I don't have it
		
	}

	@Override
	public void mouseEntered(MouseEvent e)
	{
		for(int x = 0; x < board.length; x++)
		{
			for(int y = 0; y < board[0].length; y++)
			{
				if(e.getSource().equals(board[x][y]))
				{
					//Piece.drawPreview()
				}
			}
		}
	}

	@Override
	public void mouseExited(MouseEvent e) {
		for(int x = 0; x < board.length; x++)
		{
			for(int y = 0; y < board[0].length; y++)
			{
				if(e.getSource().equals(board[x][y]))
				{
					//Piece.cancelPreview()
				}
			}
		}
	}
}
